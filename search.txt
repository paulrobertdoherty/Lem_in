/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   add_link_to_list.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pdoherty <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/01/09 10:20:08 by pdoherty          #+#    #+#             */
/*   Updated: 2019/02/01 19:40:40 by pdoherty         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

static t_list	*get_link(t_list **rooms, char *name, t_room	*other)
{
	t_list	*i;
	t_room	*current;

	i = *rooms;
	while (i)
	{
		current = (t_room *)i->content;
		if (ft_strequ(current->name, name))
		{
			ft_lstadd(&(current->links), new_list(other));
			return (new_list(current));
		}
		i = i->next;
	}
	return (NULL);
}

void			free_split(char **split)
{
	int	i;

	i = 0;
	while (split[i])
	{
		free(split[i]);
		i++;
	}
	free(split);
}

void			add_link_to_list(t_list **rooms, char *line)
{
	t_list	*i;
	t_room	*current;
	char	**split;

	split = ft_strsplit(line, '-');
	free(line);
	send_error(!split[1]);
	i = *rooms;
	while (i)
	{
		current = (t_room *)i->content;
		if (ft_strequ(current->name, split[0]))
		{
			ft_lstadd(&(current->links), get_link(rooms, split[1], current));
			break ;
		}
		i = i->next;
	}
	free_split(split);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   add_rooms.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pdoherty <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/01/08 16:30:22 by pdoherty          #+#    #+#             */
/*   Updated: 2019/02/03 17:33:26 by pdoherty         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

static int	will_continue(char **line)
{
	gnl(line);
	if (!ft_strlen(*line))
	{
		free(*line);
		return (0);
	}
	return (1);
}

static void	add_links(t_list **rooms, char *fl)
{
	char	*line;

	add_link_to_list(rooms, fl);
	while (will_continue(&line))
		add_link_to_list(rooms, line);
}

static void	set_start_and_end(int *start, int *end, int ta, int *mode)
{
	if (*mode == 1)
		*start = ta;
	else if (*mode == 2)
		*end = ta;
	*mode = 0;
}

static int	add_new_room(t_rooms *rooms, char *line)
{
	int		tr;
	char	*split;

	split = ft_strsplit(line, ' ');
	send_error(!split[1]);
	free(line);

	return (tr);
}

void		add_rooms(t_rooms **rooms, int *start, int *end)
{
	char	*line;
	int		mode;

	*rooms = new_rooms();
	mode = 0;
	while (1)
	{
		gnl(&line);
		if (ft_strchr(line, '-') != NULL)
		{
			add_links(rooms, line);
			break ;
		}
		if (ft_strequ("##start", line))
			mode = free_with_return(line, 1);
		else if (ft_strequ("##end", line))
			mode = free_with_return(line, 2);
		else
			set_start_and_end(start, end, add_new_room(rooms, line), &mode);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ants.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pdoherty <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/02/01 11:24:10 by pdoherty          #+#    #+#             */
/*   Updated: 2019/02/01 19:42:01 by pdoherty         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

t_ants		*new_ants(int ants)
{
	t_ants	*tr;

	tr = (t_ants *)malloc(sizeof(t_ants));
	tr->ant_list = NULL;
	tr->paths = NULL;
	tr->ants = ants;
	tr->ants_left = ants;
	return (tr);
}

static void	delete_ant(void *content, size_t content_size)
{
	content_size = 0;
	free(content);
}

void		delete_ants(t_ants *ants)
{
	ft_lstdel(&(ants->paths), &delete_ant);
	delete_link_list(ants->ant_list);
	free(ants);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   create_room.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pdoherty <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/01/09 14:56:45 by pdoherty          #+#    #+#             */
/*   Updated: 2019/02/01 17:56:25 by pdoherty         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

t_room	*create_room(char *line)
{
	char	**split;
	t_room	*tr;

	tr = (t_room *)malloc(sizeof(t_room));
	tr->visited = 0;
	split = ft_strsplit(line, ' ');
	free(line);
	send_error(!split[1]);
	tr->name = ft_strdup(split[0]);
	free_split(split);
	tr->links = NULL;
	return (tr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   free_with_return.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pdoherty <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/01/19 15:26:10 by pdoherty          #+#    #+#             */
/*   Updated: 2019/01/19 15:26:11 by pdoherty         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

int	free_with_return(char *str, int r)
{
	free(str);
	return (r);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_path.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pdoherty <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/02/02 11:59:07 by pdoherty          #+#    #+#             */
/*   Updated: 2019/02/03 16:25:09 by pdoherty         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

t_list	*get_paths(int **rooms, int start, int end)
{

}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   gnl.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pdoherty <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/01/18 19:16:02 by pdoherty          #+#    #+#             */
/*   Updated: 2019/01/19 15:20:35 by pdoherty         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

void	gnl(char **line)
{
	char	*l;

	while (1)
	{
		get_next_line(0, &l);
		if (l[0] != '#' || ft_strequ("##start", l) || ft_strequ("##end", l))
		{
			*line = l;
			ft_putstr(l);
			ft_putchar('\n');
			break ;
		}
		free(l);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   lem_in.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pdoherty <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/01/08 16:13:31 by pdoherty          #+#    #+#             */
/*   Updated: 2019/02/03 16:39:22 by pdoherty         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

static int	get_ants(void)
{
	char	*line;
	int		tr;

	gnl(&line);
	tr = ft_atoi(line);
	free(line);
	send_error(!tr);
	return (tr);
}

static void	free_names(char **room_names)
{
	int	i;

	i = 0;
	while (room_names[i])
	{
		free(room_names[i]);
		i++;
	}
	free(room_names);
}

int			main(void)
{
	t_rooms	*rooms;
	int		ants;
	int		start;
	int		end;

	ants = get_ants();
	rooms = NULL;
	add_rooms(&rooms, &start, &end);
	print_ants(ants, start, end, rooms);
	free_rooms(rooms);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   print_ants.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pdoherty <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/01/16 10:30:32 by pdoherty          #+#    #+#             */
/*   Updated: 2019/02/02 15:52:19 by pdoherty         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

static void	print_ant(t_ant * ant)
{
	int		n;
	char	*name;

	n = ant->n;
	name = ((t_room *)ant->path_loc->content)->name;
	ft_putchar('L');
	ft_putnbr(n);
	ft_putchar('-');
	ft_putstr(name);
	ft_putchar(' ');
}

static void	move_ants(t_ants *ants, int *can_continue)
{
	t_list	*i;
	t_ant	*current;

	i = ants->ant_list;
	*can_continue = 0;
	while (i)
	{
		current = (t_ant *)i->content;
		if (current->path_loc->next)
		{
			*can_continue = 1;
			current->path_loc = current->path_loc->next;
			print_ant(current);
		}
		i = i->next;
	}
}

static void	add_ants(t_ants *ants, int *can_continue)
{
	t_list	*i;
	t_ant	*ta;

	if (ants->ants_left < 1)
		return ;
	i = ants->paths;
	while (i && ants->ants_left >= 1)
	{
		ta = (t_ant *)malloc(sizeof(t_ant));
		ta->path_loc = i;
		ta->n = (ants->ants - ants->ants_left) + 1;
		ft_lstadd(&(ants->ant_list), new_list(ta));
		ants->ants_left--;
		print_ant(ta);
		*can_continue = 1;
		i = i->next;
	}
}

void		print_ants(int ant_c, t_room *start, t_room *end)
{
	t_ants	*ants;
	int		can_continue;

	if (!ant_c)
		return ;
	ants = new_ants(ant_c);
	get_paths(&(ants->paths), start, end, ant_c);
	if (!ants->paths)
		return ;
	sort_paths(ants->paths);
	can_continue = 1;
	while (can_continue)
	{
		move_ants(ants, &can_continue);
		add_ants(ants, &can_continue);
		ft_putchar('\n');
	}
	delete_ants(ants);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   send_error.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pdoherty <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/02/01 17:44:24 by pdoherty          #+#    #+#             */
/*   Updated: 2019/02/01 20:57:10 by pdoherty         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

void	send_error(int b)
{
	if (b)
	{
		perror("ERROR\n");
		exit(1);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   sort_paths.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pdoherty <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/02/01 16:13:12 by pdoherty          #+#    #+#             */
/*   Updated: 2019/02/01 17:17:32 by pdoherty         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lem_in.h"

static int	compare(t_list **paths_arr, int i, int j)
{
	t_path	*first;
	t_path	*second;

	first = (t_path *)paths_arr[i]->content;
	second = (t_path *)paths_arr[j]->content;
	return (first->length > second->length);
}

static void	combine(t_list **paths_arr, int s, int m, int e)
{
	t_list	**temp;
	int		i;
	int		j;
	int		k;

	temp = (t_list **)malloc(sizeof(t_list *) * (2 + e - s));
	temp[1 + e - s] = NULL;
	i = s;
	j = m + 1;
	k = 0;
	while (k < 1 + e - s)
	{
		if (compare(paths_arr, i, j))
			temp[k++] = paths_arr[j];
		else
			temp[k++] = paths_arr[i];
		if (i < m)
			i++;
		if (j < e)
			j++;	
	}
	i = s;
	k = 0;
	while (temp[k])
		paths_arr[i++] = temp[k++];
	free(temp);
}

static void	merge_sort(t_list **paths_arr, int s, int e)
{
	int	m;

	if (s < e)
	{
		m = (s + e) / 2;
		merge_sort(paths_arr, s, m);
		merge_sort(paths_arr, m + 1, e);
		combine(paths_arr, s, m, e);
	}
}

void		sort_paths(t_list *paths)
{
	t_list	**paths_arr;
	t_list	*i;
	int		j;
	int		size;

	paths_arr = ft_lst_to_array(paths, &size);
	merge_sort(paths_arr, 0, size - 1);
	i = paths;
	j = 0;
	while (i)
	{
		i->content = paths_arr[j]->content;
		i = paths->next;
		j++;
	}
	free(paths_arr);
}
